import React, { useState, useEffect } from 'react';
import {
  Typography,
  Paper,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Box,
  Divider,
  TextField,
  Tabs,
  Tab,
  Card,
  CardContent,
  IconButton
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import { useNavigate } from 'react-router-dom';

// TabPanel component for displaying tab content
function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const ChurnConfigPageThree = ({ configData, onNext, onBack, onConfigUpdate }) => {
  const navigate = useNavigate();
  const [localConfig, setLocalConfig] = useState({
    previewChurnType: configData.previewChurnType || 'churned',
    instructions: configData.instructions || {
      churned: '',
      partiallyChurned: '',
      aboutToChurn: '',
      oneTimeBuyers: ''
    }
  });
  const [tabValue, setTabValue] = useState(0);
  const [generatedOutput, setGeneratedOutput] = useState({
    agentOutput: '',
    systemPrompt: ''
  });

  // Customer types
  const availableChurnTypes = [
    { value: 'churned', label: 'Churned' },
    { value: 'partiallyChurned', label: 'Partially Churned' },
    { value: 'aboutToChurn', label: 'About to Churn' },
    { value: 'oneTimeBuyers', label: 'One Time Buyers' }
  ];

  // Generate example output whenever the selected churn type or instructions change
  useEffect(() => {
    // In a real application, this would call a real API
    generateExampleOutput(localConfig.previewChurnType, localConfig.instructions[localConfig.previewChurnType]);
  }, [localConfig.previewChurnType, localConfig.instructions[localConfig.previewChurnType]]);

  // This simulates an API call to generate outputs
  const generateExampleOutput = (churnType, instructions) => {
    // This is just placeholder text - in a real application, this would be generated by an AI
    let output = '';
    let prompt = '';
    
    switch (churnType) {
      case 'churned':
        output = `Hello John,\n\nI noticed that you've recently discontinued our premium subscription service. We're sorry to see you go and would love to understand what led to this decision.\n\nBased on your usage history, I see you were a frequent user of our analytics dashboard, but might not have explored the new reporting features we added last month.\n\nI'd like to offer you a 25% discount for the next 3 months if you'd consider giving us another try. Additionally, I'd be happy to schedule a 15-minute call to show you how the new reporting features could save you up to 5 hours a week.\n\nLet me know if you're interested, and I'll set everything up right away.\n\nBest regards,\nChurn Agent`;
        prompt = `You are a Customer Retention Agent specializing in re-engaging customers who have fully churned. Your goal is to create personalized outreach that acknowledges their departure and offers compelling reasons to return.\n\nWhen crafting your response:\n- Acknowledge that they've discontinued the service\n- Reference specific features they used frequently\n- Highlight relevant new features they may have missed\n- Offer a personalized discount or incentive based on their profile\n- Suggest a concrete next step\n\nInstructions: ${instructions || '[No specific instructions provided]'}\n\nMaintain a professional but warm tone.`;
        break;
      case 'partiallyChurned':
        output = `Hi Sarah,\n\nI hope this message finds you well. I noticed that your usage of our Pro Plan features has decreased by 60% over the past two months, particularly with our collaboration tools.\n\nWe recently enhanced our collaboration suite with real-time editing and improved notification controls, which I believe would address the workflow challenges you mentioned in your last feedback.\n\nI've prepared a personalized guide showing how these new features can be integrated into your current process. Would you be interested in a quick 10-minute demo this week to explore these improvements?\n\nLooking forward to helping you get the most out of your subscription.\n\nWarm regards,\nChurn Agent`;
        prompt = `You are a Customer Retention Agent specializing in re-engaging partially churned customers. These customers have significantly decreased their usage but haven't fully cancelled.\n\nWhen crafting your response:\n- Note their decreased usage patterns with specific metrics\n- Reference specific features they previously valued\n- Highlight relevant improvements or solutions to pain points they've experienced\n- Offer personalized assistance or training\n- Propose a specific next step\n\nInstructions: ${instructions || '[No specific instructions provided]'}\n\nUse a helpful, consultative tone.`;
        break;
      case 'aboutToChurn':
        output = `Dear Michael,\n\nI'm reaching out because I noticed some patterns in your recent account activity that suggest you might be experiencing some challenges with our service.\n\nSpecifically, I see that your team's login frequency has dropped by 40% in the past three weeks, and the document storage feature that your team previously used daily hasn't been accessed recently.\n\nWe recently released several updates that might address some of the issues you could be facing, including a completely redesigned document library with 2x faster loading times and improved search capabilities.\n\nI'd love to schedule a brief account review to ensure you're getting maximum value from your subscription. As a token of appreciation for your continued business, I can also offer you an exclusive 15% discount on your next renewal.\n\nCan I reserve a 15-minute slot on your calendar this week?\n\nBest regards,\nChurn Agent`;
        prompt = `You are a Customer Retention Agent specializing in proactively addressing potential churn. Your goal is to engage with customers showing early warning signs before they decide to leave.\n\nWhen crafting your response:\n- Tactfully acknowledge the observed decrease in engagement\n- Be specific about the usage patterns you've noticed\n- Highlight relevant new features or improvements that address likely pain points\n- Offer proactive assistance and training\n- Include a special retention offer\n- Propose a concrete next step\n\nInstructions: ${instructions || '[No specific instructions provided]'}\n\nUse a proactive, helpful tone without being alarmist.`;
        break;
      case 'oneTimeBuyers':
        output = `Hello Emma,\n\nThank you for your recent purchase of our Premium Analytics Dashboard. We appreciate your business and hope you're enjoying the insights it provides.\n\nI noticed that you've explored the basic reporting features, but there are several powerful tools like Custom Data Visualization and Automated Insights that many of our regular customers find incredibly valuable for optimizing their business decisions.\n\nBased on your industry, I think you might particularly benefit from our Market Comparison feature, which allows you to benchmark your performance against industry averages.\n\nI'd be happy to offer you a special 20% discount on your next purchase, as well as a complimentary 30-minute consultation to help you get the most out of these advanced features.\n\nWould you be interested in scheduling a quick call this week?\n\nBest regards,\nChurn Agent`;
        prompt = `You are a Customer Retention Agent specializing in converting one-time buyers into repeat customers. Your goal is to create personalized outreach that acknowledges their purchase and presents compelling reasons to make additional purchases.\n\nWhen crafting your response:\n- Thank them for their specific purchase\n- Highlight features or benefits they haven't fully explored yet\n- Suggest complementary products or services based on their purchase history\n- Offer a special incentive for their next purchase\n- Propose a concrete next step\n\nInstructions: ${instructions || '[No specific instructions provided]'}\n\nUse a helpful, appreciative tone that focuses on adding value.`;
        break;
      default:
        output = 'Please select a churn type to see a preview.';
        prompt = 'Please select a churn type to see a system prompt.';
    }
    
    setGeneratedOutput({
      agentOutput: output,
      systemPrompt: prompt
    });
  };

  const handleChurnTypeChange = (e) => {
    setLocalConfig({
      ...localConfig,
      previewChurnType: e.target.value
    });
  };

  const handleInstructionsChange = (e) => {
    setLocalConfig({
      ...localConfig,
      instructions: {
        ...localConfig.instructions,
        [localConfig.previewChurnType]: e.target.value
      }
    });
  };

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onConfigUpdate({
      ...configData,
      ...localConfig
    });
  };

  return (
    <div>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <IconButton 
          color="primary" 
          onClick={() => navigate('/')} 
          aria-label="back to home"
          sx={{ mr: 1 }}
        >
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h4" className="page-title">
          Churn Agent: Instructions & Preview
        </Typography>
      </Box>
      
      <Paper className="form-container" elevation={1}>
        <form onSubmit={handleSubmit}>
          {/* Churn Type Selection */}
          <Typography variant="h6" className="section-title">
            Preview Configuration
          </Typography>
          <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
            Select a customer type to preview agent behavior
          </Typography>
          <FormControl fullWidth margin="normal" sx={{ mb: 3 }}>
            <InputLabel id="churn-type-label">Customer Type</InputLabel>
            <Select
              labelId="churn-type-label"
              id="churnType"
              value={localConfig.previewChurnType}
              onChange={handleChurnTypeChange}
              label="Customer Type"
            >
              {availableChurnTypes.map((type) => (
                <MenuItem key={type.value} value={type.value}>
                  {type.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <Divider sx={{ my: 3 }} />
          
          {/* Instructions Input */}
          <Typography variant="h6" className="section-title">
            Agent Instructions
          </Typography>
          <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
            Provide specific instructions for the agent when dealing with {availableChurnTypes.find(t => t.value === localConfig.previewChurnType)?.label.toLowerCase()} customers
          </Typography>
          <TextField
            fullWidth
            label="Instructions"
            multiline
            rows={4}
            value={localConfig.instructions[localConfig.previewChurnType]}
            onChange={handleInstructionsChange}
            placeholder="Enter specific instructions for the agent to follow when interacting with this type of customer..."
            margin="normal"
            sx={{ mb: 3 }}
          />

          <Divider sx={{ my: 3 }} />
          
          {/* Output Preview */}
          <Typography variant="h6" className="section-title">
            Preview
          </Typography>
          <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
            See how the agent will respond to {availableChurnTypes.find(t => t.value === localConfig.previewChurnType)?.label.toLowerCase()} customers
          </Typography>
          
          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
            <Tabs value={tabValue} onChange={handleTabChange} aria-label="preview tabs">
              <Tab label="Agent Output" />
              <Tab label="System Prompt" />
            </Tabs>
          </Box>
          
          <TabPanel value={tabValue} index={0}>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="body1" component="div" sx={{ whiteSpace: 'pre-line' }}>
                  {generatedOutput.agentOutput}
                </Typography>
              </CardContent>
            </Card>
          </TabPanel>
          
          <TabPanel value={tabValue} index={1}>
            <Card variant="outlined">
              <CardContent>
                <Typography variant="body2" component="div" sx={{ whiteSpace: 'pre-line', fontFamily: 'monospace' }}>
                  {generatedOutput.systemPrompt}
                </Typography>
              </CardContent>
            </Card>
          </TabPanel>

          <Box className="navigation-buttons">
            <Button 
              variant="outlined"
              color="primary"
              size="large"
              onClick={() => onBack()}
            >
              Back
            </Button>
            <Button 
              type="submit" 
              variant="contained" 
              color="primary"
              size="large"
            >
              Finish
            </Button>
          </Box>
        </form>
      </Paper>
    </div>
  );
};

export default ChurnConfigPageThree; 